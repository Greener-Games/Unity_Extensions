### YamlMime:ManagedReference
items:
- uid: GG.Extensions.DictionaryExtensions
  commentId: T:GG.Extensions.DictionaryExtensions
  id: DictionaryExtensions
  parent: GG.Extensions
  children:
  - GG.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  - GG.Extensions.DictionaryExtensions.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)
  langs:
  - csharp
  - vb
  name: DictionaryExtensions
  nameWithType: DictionaryExtensions
  fullName: GG.Extensions.DictionaryExtensions
  type: Class
  source:
    remote:
      path: Assets/Unity_Extensions/DictionaryExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: DictionaryExtensions
    path: ../Assets/Unity_Extensions/DictionaryExtensions.cs
    startLine: 4
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static class DictionaryExtensions
    content.vb: Public Module DictionaryExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GG.Extensions.DictionaryExtensions.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)
  commentId: M:GG.Extensions.DictionaryExtensions.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)
  id: ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: GG.Extensions.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: ChangeKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TKey)
  nameWithType: DictionaryExtensions.ChangeKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TKey)
  fullName: GG.Extensions.DictionaryExtensions.ChangeKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, TKey)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/DictionaryExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ChangeKey
    path: ../Assets/Unity_Extensions/DictionaryExtensions.cs
    startLine: 15
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nChange the key of a dictionary entry\n"
  example: []
  syntax:
    content: public static bool ChangeKey<TKey, TValue>(this IDictionary<TKey, TValue> dict, TKey oldKey, TKey newKey)
    parameters:
    - id: dict
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: ''
    - id: oldKey
      type: '{TKey}'
      description: ''
    - id: newKey
      type: '{TKey}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChangeKey(Of TKey, TValue)(dict As IDictionary(Of TKey, TValue), oldKey As TKey, newKey As TKey) As Boolean
  overload: GG.Extensions.DictionaryExtensions.ChangeKey*
  nameWithType.vb: DictionaryExtensions.ChangeKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.DictionaryExtensions.ChangeKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TKey)
  name.vb: ChangeKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TKey)
- uid: GG.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:GG.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  id: AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: GG.Extensions.DictionaryExtensions
  langs:
  - csharp
  - vb
  name: AddOrUpdate<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryExtensions.AddOrUpdate<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: GG.Extensions.DictionaryExtensions.AddOrUpdate<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/DictionaryExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: AddOrUpdate
    path: ../Assets/Unity_Extensions/DictionaryExtensions.cs
    startLine: 34
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nChecks if a dictionary value exists, if not creates it, if so updates it\n"
  example: []
  syntax:
    content: public static void AddOrUpdate<TKey, TValue>(this Dictionary<TKey, TValue> dic, TKey key, TValue newValue)
    parameters:
    - id: dic
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    - id: key
      type: '{TKey}'
      description: ''
    - id: newValue
      type: '{TValue}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddOrUpdate(Of TKey, TValue)(dic As Dictionary(Of TKey, TValue), key As TKey, newValue As TValue)
  overload: GG.Extensions.DictionaryExtensions.AddOrUpdate*
  nameWithType.vb: DictionaryExtensions.AddOrUpdate(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.DictionaryExtensions.AddOrUpdate(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: AddOrUpdate(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
references:
- uid: GG.Extensions
  commentId: N:GG.Extensions
  name: GG.Extensions
  nameWithType: GG.Extensions
  fullName: GG.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GG.Extensions.DictionaryExtensions.ChangeKey*
  commentId: Overload:GG.Extensions.DictionaryExtensions.ChangeKey
  name: ChangeKey
  nameWithType: DictionaryExtensions.ChangeKey
  fullName: GG.Extensions.DictionaryExtensions.ChangeKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: GG.Extensions.DictionaryExtensions.AddOrUpdate*
  commentId: Overload:GG.Extensions.DictionaryExtensions.AddOrUpdate
  name: AddOrUpdate
  nameWithType: DictionaryExtensions.AddOrUpdate
  fullName: GG.Extensions.DictionaryExtensions.AddOrUpdate
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
