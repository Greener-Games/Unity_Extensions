### YamlMime:ManagedReference
items:
- uid: GG.Extensions.ByteExtensions
  commentId: T:GG.Extensions.ByteExtensions
  id: ByteExtensions
  parent: GG.Extensions
  children:
  - GG.Extensions.ByteExtensions.IsBitSet(System.Byte,System.Int32)
  - GG.Extensions.ByteExtensions.SetBit(System.Byte,System.Int32)
  - GG.Extensions.ByteExtensions.ToBinaryString(System.Byte)
  - GG.Extensions.ByteExtensions.ToggleBit(System.Byte,System.Int32)
  - GG.Extensions.ByteExtensions.UnsetBit(System.Byte,System.Int32)
  langs:
  - csharp
  - vb
  name: ByteExtensions
  nameWithType: ByteExtensions
  fullName: GG.Extensions.ByteExtensions
  type: Class
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ByteExtensions
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 7
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nByte Extensions class\n"
  example: []
  syntax:
    content: public static class ByteExtensions
    content.vb: Public Module ByteExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GG.Extensions.ByteExtensions.IsBitSet(System.Byte,System.Int32)
  commentId: M:GG.Extensions.ByteExtensions.IsBitSet(System.Byte,System.Int32)
  id: IsBitSet(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: GG.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: IsBitSet(Byte, Int32)
  nameWithType: ByteExtensions.IsBitSet(Byte, Int32)
  fullName: GG.Extensions.ByteExtensions.IsBitSet(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: IsBitSet
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 15
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nIs a bit set?\n"
  example: []
  syntax:
    content: public static bool IsBitSet(this byte b, int pos)
    parameters:
    - id: b
      type: System.Byte
      description: The byte to compare
    - id: pos
      type: System.Int32
      description: The bit position to check
    return:
      type: System.Boolean
      description: True if bit is set
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsBitSet(b As Byte, pos As Integer) As Boolean
  overload: GG.Extensions.ByteExtensions.IsBitSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ByteExtensions.SetBit(System.Byte,System.Int32)
  commentId: M:GG.Extensions.ByteExtensions.SetBit(System.Byte,System.Int32)
  id: SetBit(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: GG.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: SetBit(Byte, Int32)
  nameWithType: ByteExtensions.SetBit(Byte, Int32)
  fullName: GG.Extensions.ByteExtensions.SetBit(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: SetBit
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 29
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nSet the bit (it&apos;s unclear if this works properly so i&apos;ve not been using it currently).\n"
  example: []
  syntax:
    content: public static byte SetBit(this byte b, int pos)
    parameters:
    - id: b
      type: System.Byte
      description: The byte to change
    - id: pos
      type: System.Int32
      description: The bit position to set
    return:
      type: System.Byte
      description: The new byte
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetBit(b As Byte, pos As Integer) As Byte
  overload: GG.Extensions.ByteExtensions.SetBit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ByteExtensions.UnsetBit(System.Byte,System.Int32)
  commentId: M:GG.Extensions.ByteExtensions.UnsetBit(System.Byte,System.Int32)
  id: UnsetBit(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: GG.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: UnsetBit(Byte, Int32)
  nameWithType: ByteExtensions.UnsetBit(Byte, Int32)
  fullName: GG.Extensions.ByteExtensions.UnsetBit(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: UnsetBit
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 43
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nUnset a bit\n"
  example: []
  syntax:
    content: public static byte UnsetBit(this byte b, int pos)
    parameters:
    - id: b
      type: System.Byte
      description: The byte to change
    - id: pos
      type: System.Int32
      description: The bit position to set
    return:
      type: System.Byte
      description: The new byte
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnsetBit(b As Byte, pos As Integer) As Byte
  overload: GG.Extensions.ByteExtensions.UnsetBit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ByteExtensions.ToggleBit(System.Byte,System.Int32)
  commentId: M:GG.Extensions.ByteExtensions.ToggleBit(System.Byte,System.Int32)
  id: ToggleBit(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: GG.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: ToggleBit(Byte, Int32)
  nameWithType: ByteExtensions.ToggleBit(Byte, Int32)
  fullName: GG.Extensions.ByteExtensions.ToggleBit(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ToggleBit
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 57
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nToggles a bit\n"
  example: []
  syntax:
    content: public static byte ToggleBit(this byte b, int pos)
    parameters:
    - id: b
      type: System.Byte
      description: The byte to toggle
    - id: pos
      type: System.Int32
      description: The positon to toggle
    return:
      type: System.Byte
      description: The new byte
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToggleBit(b As Byte, pos As Integer) As Byte
  overload: GG.Extensions.ByteExtensions.ToggleBit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ByteExtensions.ToBinaryString(System.Byte)
  commentId: M:GG.Extensions.ByteExtensions.ToBinaryString(System.Byte)
  id: ToBinaryString(System.Byte)
  isExtensionMethod: true
  parent: GG.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: ToBinaryString(Byte)
  nameWithType: ByteExtensions.ToBinaryString(Byte)
  fullName: GG.Extensions.ByteExtensions.ToBinaryString(System.Byte)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ToBinaryString
    path: ../Assets/Unity_Extensions/ByteExtensions.cs
    startLine: 70
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nConverts to a binary string\n"
  example: []
  syntax:
    content: public static string ToBinaryString(this byte b)
    parameters:
    - id: b
      type: System.Byte
      description: The byte to compare
    return:
      type: System.String
      description: Byte in string format
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBinaryString(b As Byte) As String
  overload: GG.Extensions.ByteExtensions.ToBinaryString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GG.Extensions
  commentId: N:GG.Extensions
  name: GG.Extensions
  nameWithType: GG.Extensions
  fullName: GG.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GG.Extensions.ByteExtensions.IsBitSet*
  commentId: Overload:GG.Extensions.ByteExtensions.IsBitSet
  name: IsBitSet
  nameWithType: ByteExtensions.IsBitSet
  fullName: GG.Extensions.ByteExtensions.IsBitSet
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GG.Extensions.ByteExtensions.SetBit*
  commentId: Overload:GG.Extensions.ByteExtensions.SetBit
  name: SetBit
  nameWithType: ByteExtensions.SetBit
  fullName: GG.Extensions.ByteExtensions.SetBit
- uid: GG.Extensions.ByteExtensions.UnsetBit*
  commentId: Overload:GG.Extensions.ByteExtensions.UnsetBit
  name: UnsetBit
  nameWithType: ByteExtensions.UnsetBit
  fullName: GG.Extensions.ByteExtensions.UnsetBit
- uid: GG.Extensions.ByteExtensions.ToggleBit*
  commentId: Overload:GG.Extensions.ByteExtensions.ToggleBit
  name: ToggleBit
  nameWithType: ByteExtensions.ToggleBit
  fullName: GG.Extensions.ByteExtensions.ToggleBit
- uid: GG.Extensions.ByteExtensions.ToBinaryString*
  commentId: Overload:GG.Extensions.ByteExtensions.ToBinaryString
  name: ToBinaryString
  nameWithType: ByteExtensions.ToBinaryString
  fullName: GG.Extensions.ByteExtensions.ToBinaryString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
