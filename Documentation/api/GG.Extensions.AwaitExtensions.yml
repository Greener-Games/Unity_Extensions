### YamlMime:ManagedReference
items:
- uid: GG.Extensions.AwaitExtensions
  commentId: T:GG.Extensions.AwaitExtensions
  id: AwaitExtensions
  parent: GG.Extensions
  children:
  - GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.IProgress{``0})
  - GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task},System.IProgress{``0})
  - GG.Extensions.AwaitExtensions.WaitUntil(System.Func{System.Boolean},System.Int32,System.Int32)
  - GG.Extensions.AwaitExtensions.WaitWhile(System.Func{System.Boolean},System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: AwaitExtensions
  nameWithType: AwaitExtensions
  fullName: GG.Extensions.AwaitExtensions
  type: Class
  source:
    remote:
      path: Assets/Unity_Extensions/AwaitExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: AwaitExtensions
    path: ../Assets/Unity_Extensions/AwaitExtensions.cs
    startLine: 15
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static class AwaitExtensions
    content.vb: Public Module AwaitExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GG.Extensions.AwaitExtensions.WaitWhile(System.Func{System.Boolean},System.Int32,System.Int32)
  commentId: M:GG.Extensions.AwaitExtensions.WaitWhile(System.Func{System.Boolean},System.Int32,System.Int32)
  id: WaitWhile(System.Func{System.Boolean},System.Int32,System.Int32)
  parent: GG.Extensions.AwaitExtensions
  langs:
  - csharp
  - vb
  name: WaitWhile(Func<Boolean>, Int32, Int32)
  nameWithType: AwaitExtensions.WaitWhile(Func<Boolean>, Int32, Int32)
  fullName: GG.Extensions.AwaitExtensions.WaitWhile(System.Func<System.Boolean>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/AwaitExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: WaitWhile
    path: ../Assets/Unity_Extensions/AwaitExtensions.cs
    startLine: 25
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nBlocks while condition is true or timeout occurs.\n"
  example: []
  syntax:
    content: public static Task WaitWhile(Func<bool> condition, int frequency = 25, int timeout = -1)
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: The condition that will perpetuate the block.
    - id: frequency
      type: System.Int32
      description: The frequency at which the condition will be check, in milliseconds.
    - id: timeout
      type: System.Int32
      description: Timeout in milliseconds.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Shared Function WaitWhile(condition As Func(Of Boolean), frequency As Integer = 25, timeout As Integer = -1) As Task
  overload: GG.Extensions.AwaitExtensions.WaitWhile*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
  nameWithType.vb: AwaitExtensions.WaitWhile(Func(Of Boolean), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.AwaitExtensions.WaitWhile(System.Func(Of System.Boolean), System.Int32, System.Int32)
  name.vb: WaitWhile(Func(Of Boolean), Int32, Int32)
- uid: GG.Extensions.AwaitExtensions.WaitUntil(System.Func{System.Boolean},System.Int32,System.Int32)
  commentId: M:GG.Extensions.AwaitExtensions.WaitUntil(System.Func{System.Boolean},System.Int32,System.Int32)
  id: WaitUntil(System.Func{System.Boolean},System.Int32,System.Int32)
  parent: GG.Extensions.AwaitExtensions
  langs:
  - csharp
  - vb
  name: WaitUntil(Func<Boolean>, Int32, Int32)
  nameWithType: AwaitExtensions.WaitUntil(Func<Boolean>, Int32, Int32)
  fullName: GG.Extensions.AwaitExtensions.WaitUntil(System.Func<System.Boolean>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/AwaitExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: WaitUntil
    path: ../Assets/Unity_Extensions/AwaitExtensions.cs
    startLine: 43
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nBlocks until condition is true or timeout occurs.\n"
  example: []
  syntax:
    content: public static Task WaitUntil(Func<bool> condition, int frequency = 25, int timeout = -1)
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: The break condition.
    - id: frequency
      type: System.Int32
      description: The frequency at which the condition will be checked.
    - id: timeout
      type: System.Int32
      description: The timeout in milliseconds.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Shared Function WaitUntil(condition As Func(Of Boolean), frequency As Integer = 25, timeout As Integer = -1) As Task
  overload: GG.Extensions.AwaitExtensions.WaitUntil*
  nameWithType.vb: AwaitExtensions.WaitUntil(Func(Of Boolean), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.AwaitExtensions.WaitUntil(System.Func(Of System.Boolean), System.Int32, System.Int32)
  name.vb: WaitUntil(Func(Of Boolean), Int32, Int32)
- uid: GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task},System.IProgress{``0})
  commentId: M:GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task},System.IProgress{``0})
  id: ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task},System.IProgress{``0})
  isExtensionMethod: true
  parent: GG.Extensions.AwaitExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IEnumerable<T>, Int32, Func<T, Task>, IProgress<T>)
  nameWithType: AwaitExtensions.ForEachAsync<T>(IEnumerable<T>, Int32, Func<T, Task>, IProgress<T>)
  fullName: GG.Extensions.AwaitExtensions.ForEachAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<T, System.Threading.Tasks.Task>, System.IProgress<T>)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/AwaitExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ForEachAsync
    path: ../Assets/Unity_Extensions/AwaitExtensions.cs
    startLine: 63
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static Task ForEachAsync<T>(this IEnumerable<T> source, int degreeOfParallelism, Func<T, Task> body, IProgress<T> progress = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: degreeOfParallelism
      type: System.Int32
    - id: body
      type: System.Func{{T},System.Threading.Tasks.Task}
    - id: progress
      type: System.IProgress{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IEnumerable(Of T), degreeOfParallelism As Integer, body As Func(Of T, Task), progress As IProgress(Of T) = Nothing) As Task
  overload: GG.Extensions.AwaitExtensions.ForEachAsync*
  nameWithType.vb: AwaitExtensions.ForEachAsync(Of T)(IEnumerable(Of T), Int32, Func(Of T, Task), IProgress(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.AwaitExtensions.ForEachAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of T, System.Threading.Tasks.Task), System.IProgress(Of T))
  name.vb: ForEachAsync(Of T)(IEnumerable(Of T), Int32, Func(Of T, Task), IProgress(Of T))
- uid: GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.IProgress{``0})
  commentId: M:GG.Extensions.AwaitExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.IProgress{``0})
  id: ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.IProgress{``0})
  isExtensionMethod: true
  parent: GG.Extensions.AwaitExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IEnumerable<T>, Int32, Func<T, Int32, Task>, IProgress<T>)
  nameWithType: AwaitExtensions.ForEachAsync<T>(IEnumerable<T>, Int32, Func<T, Int32, Task>, IProgress<T>)
  fullName: GG.Extensions.AwaitExtensions.ForEachAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<T, System.Int32, System.Threading.Tasks.Task>, System.IProgress<T>)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/AwaitExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ForEachAsync
    path: ../Assets/Unity_Extensions/AwaitExtensions.cs
    startLine: 92
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nYield for all events to complete passing back the index from the list\n"
  example: []
  syntax:
    content: public static Task ForEachAsync<T>(this IEnumerable<T> source, int degreeOfParallelism, Func<T, int, Task> body, IProgress<T> progress = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: degreeOfParallelism
      type: System.Int32
      description: ''
    - id: body
      type: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
      description: ''
    - id: progress
      type: System.IProgress{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IEnumerable(Of T), degreeOfParallelism As Integer, body As Func(Of T, Integer, Task), progress As IProgress(Of T) = Nothing) As Task
  overload: GG.Extensions.AwaitExtensions.ForEachAsync*
  nameWithType.vb: AwaitExtensions.ForEachAsync(Of T)(IEnumerable(Of T), Int32, Func(Of T, Int32, Task), IProgress(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GG.Extensions.AwaitExtensions.ForEachAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of T, System.Int32, System.Threading.Tasks.Task), System.IProgress(Of T))
  name.vb: ForEachAsync(Of T)(IEnumerable(Of T), Int32, Func(Of T, Int32, Task), IProgress(Of T))
references:
- uid: GG.Extensions
  commentId: N:GG.Extensions
  name: GG.Extensions
  nameWithType: GG.Extensions
  fullName: GG.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
  isExternal: true
- uid: GG.Extensions.AwaitExtensions.WaitWhile*
  commentId: Overload:GG.Extensions.AwaitExtensions.WaitWhile
  name: WaitWhile
  nameWithType: AwaitExtensions.WaitWhile
  fullName: GG.Extensions.AwaitExtensions.WaitWhile
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: GG.Extensions.AwaitExtensions.WaitUntil*
  commentId: Overload:GG.Extensions.AwaitExtensions.WaitUntil
  name: WaitUntil
  nameWithType: AwaitExtensions.WaitUntil
  fullName: GG.Extensions.AwaitExtensions.WaitUntil
- uid: GG.Extensions.AwaitExtensions.ForEachAsync*
  commentId: Overload:GG.Extensions.AwaitExtensions.ForEachAsync
  name: ForEachAsync
  nameWithType: AwaitExtensions.ForEachAsync
  fullName: GG.Extensions.AwaitExtensions.ForEachAsync
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<T, Task>
  nameWithType: Func<T, Task>
  fullName: System.Func<T, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Task)
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress{{T}}
  commentId: T:System.IProgress{``0}
  parent: System
  definition: System.IProgress`1
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullName.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress`1
  commentId: T:System.IProgress`1
  isExternal: true
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullName.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Int32,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<T, Int32, Task>
  nameWithType: Func<T, Int32, Task>
  fullName: System.Func<T, System.Int32, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Int32, Task)
  fullName.vb: System.Func(Of T, System.Int32, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Int32, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
