### YamlMime:ManagedReference
items:
- uid: GG.Extensions.ColorExtensions
  commentId: T:GG.Extensions.ColorExtensions
  id: ColorExtensions
  parent: GG.Extensions
  children:
  - GG.Extensions.ColorExtensions.ChangeColorBrightness(UnityEngine.Color,System.Single)
  - GG.Extensions.ColorExtensions.ColorToHex(UnityEngine.Color32)
  - GG.Extensions.ColorExtensions.HexToColor(System.String)
  - GG.Extensions.ColorExtensions.Invert(UnityEngine.Color)
  - GG.Extensions.ColorExtensions.IsApproximatelyBlack(UnityEngine.Color)
  - GG.Extensions.ColorExtensions.IsApproximatelyWhite(UnityEngine.Color)
  - GG.Extensions.ColorExtensions.Opaque(UnityEngine.Color)
  - GG.Extensions.ColorExtensions.WithAlpha(UnityEngine.Color,System.Single)
  langs:
  - csharp
  - vb
  name: ColorExtensions
  nameWithType: ColorExtensions
  fullName: GG.Extensions.ColorExtensions
  type: Class
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ColorExtensions
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 4
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static class ColorExtensions
    content.vb: Public Module ColorExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GG.Extensions.ColorExtensions.ColorToHex(UnityEngine.Color32)
  commentId: M:GG.Extensions.ColorExtensions.ColorToHex(UnityEngine.Color32)
  id: ColorToHex(UnityEngine.Color32)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: ColorToHex(Color32)
  nameWithType: ColorExtensions.ColorToHex(Color32)
  fullName: GG.Extensions.ColorExtensions.ColorToHex(UnityEngine.Color32)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ColorToHex
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 7
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static string ColorToHex(this Color32 color)
    parameters:
    - id: color
      type: UnityEngine.Color32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ColorToHex(color As Color32) As String
  overload: GG.Extensions.ColorExtensions.ColorToHex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.HexToColor(System.String)
  commentId: M:GG.Extensions.ColorExtensions.HexToColor(System.String)
  id: HexToColor(System.String)
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: HexToColor(String)
  nameWithType: ColorExtensions.HexToColor(String)
  fullName: GG.Extensions.ColorExtensions.HexToColor(System.String)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: HexToColor
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 13
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  syntax:
    content: public static Color HexToColor(string hex)
    parameters:
    - id: hex
      type: System.String
    return:
      type: UnityEngine.Color
    content.vb: Public Shared Function HexToColor(hex As String) As Color
  overload: GG.Extensions.ColorExtensions.HexToColor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.ChangeColorBrightness(UnityEngine.Color,System.Single)
  commentId: M:GG.Extensions.ColorExtensions.ChangeColorBrightness(UnityEngine.Color,System.Single)
  id: ChangeColorBrightness(UnityEngine.Color,System.Single)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: ChangeColorBrightness(Color, Single)
  nameWithType: ColorExtensions.ChangeColorBrightness(Color, Single)
  fullName: GG.Extensions.ColorExtensions.ChangeColorBrightness(UnityEngine.Color, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: ChangeColorBrightness
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 39
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nCreates color with corrected brightness.\n"
  example: []
  syntax:
    content: public static Color ChangeColorBrightness(this Color color, float correctionFactor)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: Color to correct.
    - id: correctionFactor
      type: System.Single
      description: "The brightness correction factor. Must be between -1 and 1. \nNegative values produce darker colors."
    return:
      type: UnityEngine.Color
      description: "\nCorrected <xref href=\"UnityEngine.Color\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChangeColorBrightness(color As Color, correctionFactor As Single) As Color
  overload: GG.Extensions.ColorExtensions.ChangeColorBrightness*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.IsApproximatelyBlack(UnityEngine.Color)
  commentId: M:GG.Extensions.ColorExtensions.IsApproximatelyBlack(UnityEngine.Color)
  id: IsApproximatelyBlack(UnityEngine.Color)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: IsApproximatelyBlack(Color)
  nameWithType: ColorExtensions.IsApproximatelyBlack(Color)
  fullName: GG.Extensions.ColorExtensions.IsApproximatelyBlack(UnityEngine.Color)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: IsApproximatelyBlack
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 69
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nReturns whether the color is black or almost black.\n"
  example: []
  syntax:
    content: public static bool IsApproximatelyBlack(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsApproximatelyBlack(color As Color) As Boolean
  overload: GG.Extensions.ColorExtensions.IsApproximatelyBlack*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.IsApproximatelyWhite(UnityEngine.Color)
  commentId: M:GG.Extensions.ColorExtensions.IsApproximatelyWhite(UnityEngine.Color)
  id: IsApproximatelyWhite(UnityEngine.Color)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: IsApproximatelyWhite(Color)
  nameWithType: ColorExtensions.IsApproximatelyWhite(Color)
  fullName: GG.Extensions.ColorExtensions.IsApproximatelyWhite(UnityEngine.Color)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: IsApproximatelyWhite
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 79
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nReturns whether the color is white or almost white.\n"
  example: []
  syntax:
    content: public static bool IsApproximatelyWhite(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsApproximatelyWhite(color As Color) As Boolean
  overload: GG.Extensions.ColorExtensions.IsApproximatelyWhite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.Opaque(UnityEngine.Color)
  commentId: M:GG.Extensions.ColorExtensions.Opaque(UnityEngine.Color)
  id: Opaque(UnityEngine.Color)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: Opaque(Color)
  nameWithType: ColorExtensions.Opaque(Color)
  fullName: GG.Extensions.ColorExtensions.Opaque(UnityEngine.Color)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: Opaque
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 89
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nReturns an opaque version of the given color.\n"
  example: []
  syntax:
    content: public static Color Opaque(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: ''
    return:
      type: UnityEngine.Color
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Opaque(color As Color) As Color
  overload: GG.Extensions.ColorExtensions.Opaque*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.Invert(UnityEngine.Color)
  commentId: M:GG.Extensions.ColorExtensions.Invert(UnityEngine.Color)
  id: Invert(UnityEngine.Color)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: Invert(Color)
  nameWithType: ColorExtensions.Invert(Color)
  fullName: GG.Extensions.ColorExtensions.Invert(UnityEngine.Color)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: Invert
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 99
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nReturns a new color that is this color inverted.\n"
  example: []
  syntax:
    content: public static Color Invert(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color to invert.
    return:
      type: UnityEngine.Color
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Invert(color As Color) As Color
  overload: GG.Extensions.ColorExtensions.Invert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GG.Extensions.ColorExtensions.WithAlpha(UnityEngine.Color,System.Single)
  commentId: M:GG.Extensions.ColorExtensions.WithAlpha(UnityEngine.Color,System.Single)
  id: WithAlpha(UnityEngine.Color,System.Single)
  isExtensionMethod: true
  parent: GG.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: WithAlpha(Color, Single)
  nameWithType: ColorExtensions.WithAlpha(Color, Single)
  fullName: GG.Extensions.ColorExtensions.WithAlpha(UnityEngine.Color, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Unity_Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Reddevildragg/Unity_Extensions.git
    id: WithAlpha
    path: ../Assets/Unity_Extensions/ColorExtensions.cs
    startLine: 110
  assemblies:
  - gg.extensions
  namespace: GG.Extensions
  summary: "\nReturns the same color, but with the specified alpha.\n"
  example: []
  syntax:
    content: public static Color WithAlpha(this Color color, float alpha)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color.
    - id: alpha
      type: System.Single
      description: The alpha.
    return:
      type: UnityEngine.Color
      description: Color.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithAlpha(color As Color, alpha As Single) As Color
  overload: GG.Extensions.ColorExtensions.WithAlpha*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GG.Extensions
  commentId: N:GG.Extensions
  name: GG.Extensions
  nameWithType: GG.Extensions
  fullName: GG.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GG.Extensions.ColorExtensions.ColorToHex*
  commentId: Overload:GG.Extensions.ColorExtensions.ColorToHex
  name: ColorToHex
  nameWithType: ColorExtensions.ColorToHex
  fullName: GG.Extensions.ColorExtensions.ColorToHex
- uid: UnityEngine.Color32
  commentId: T:UnityEngine.Color32
  parent: UnityEngine
  isExternal: true
  name: Color32
  nameWithType: Color32
  fullName: UnityEngine.Color32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: GG.Extensions.ColorExtensions.HexToColor*
  commentId: Overload:GG.Extensions.ColorExtensions.HexToColor
  name: HexToColor
  nameWithType: ColorExtensions.HexToColor
  fullName: GG.Extensions.ColorExtensions.HexToColor
- uid: UnityEngine.Color
  commentId: T:UnityEngine.Color
  parent: UnityEngine
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: GG.Extensions.ColorExtensions.ChangeColorBrightness*
  commentId: Overload:GG.Extensions.ColorExtensions.ChangeColorBrightness
  name: ChangeColorBrightness
  nameWithType: ColorExtensions.ChangeColorBrightness
  fullName: GG.Extensions.ColorExtensions.ChangeColorBrightness
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: GG.Extensions.ColorExtensions.IsApproximatelyBlack*
  commentId: Overload:GG.Extensions.ColorExtensions.IsApproximatelyBlack
  name: IsApproximatelyBlack
  nameWithType: ColorExtensions.IsApproximatelyBlack
  fullName: GG.Extensions.ColorExtensions.IsApproximatelyBlack
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GG.Extensions.ColorExtensions.IsApproximatelyWhite*
  commentId: Overload:GG.Extensions.ColorExtensions.IsApproximatelyWhite
  name: IsApproximatelyWhite
  nameWithType: ColorExtensions.IsApproximatelyWhite
  fullName: GG.Extensions.ColorExtensions.IsApproximatelyWhite
- uid: GG.Extensions.ColorExtensions.Opaque*
  commentId: Overload:GG.Extensions.ColorExtensions.Opaque
  name: Opaque
  nameWithType: ColorExtensions.Opaque
  fullName: GG.Extensions.ColorExtensions.Opaque
- uid: GG.Extensions.ColorExtensions.Invert*
  commentId: Overload:GG.Extensions.ColorExtensions.Invert
  name: Invert
  nameWithType: ColorExtensions.Invert
  fullName: GG.Extensions.ColorExtensions.Invert
- uid: GG.Extensions.ColorExtensions.WithAlpha*
  commentId: Overload:GG.Extensions.ColorExtensions.WithAlpha
  name: WithAlpha
  nameWithType: ColorExtensions.WithAlpha
  fullName: GG.Extensions.ColorExtensions.WithAlpha
